class TreeNode {
  constructor(name) {
    this.name = name;
    this.children = [];
    this.parent = null;
  }
}

class Tree {
  constructor() {
    this.root = null;
  }

  addNode(parentNode, childNode) {
    if (!this.root) {
      this.root = parentNode;
    }

    if (childNode === this.root) {
      this.root = parentNode;
    }
    childNode.parent = parentNode;
    parentNode.children.push(childNode);
  }

  findNode(name, currentNode = this.root) {
    if (currentNode.name === name) {
      return currentNode;
    }

    for (const childNode of currentNode.children) {
      const foundNode = this.findNode(name, childNode);
      if (foundNode) {
        return foundNode;
      }
    }

    return null;
  }

  printNode(node, path = []) {
    if (node === this.root) {
      path.push(node.name);
      console.log(path.reverse().join(" > "));
    } else {
      path.push(node.name);
      this.printNode(node.parent, path);
    }
  }
}

// Usage example:
const tree = new Tree();

const root = new TreeNode("Root");

const nodeA = new TreeNode("Node A");
tree.addNode(root, nodeA);

const nodeB = new TreeNode("Node B");
tree.addNode(root, nodeB);

const nodeC = new TreeNode("Node C");
tree.addNode(nodeA, nodeC);

const nodeD = new TreeNode("Node D");
tree.addNode(nodeA, nodeD);

const nodeE = new TreeNode("Node E");
tree.addNode(nodeC, nodeE);
a = tree.findNode("Node E");
console.log(a); // Output: TreeNode { name: 'Node E', children: [], parent: TreeNode { name: 'Node C', ... } }
if (a) {
  tree.addNode(a, new TreeNode("Node F"));
}
b = tree.findNode("Node F");
d = tree.findNode("Node G");
c = tree.findNode("Root");
if (!d) d = new TreeNode("Node G");
tree.addNode(d, c);
tree.printNode(b);
